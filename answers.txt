# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Won Kyu Lee
Student ID: 904 083 134
Email: wlee89@ucla.edu

# Partner 2 (if you're working in a team)
Name: Merethe Hansen
Student ID: 203 947 594
Email: merethe@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We forked the downloads and uploads to be running in different processes then
closed process it was done handling the download or upload.


# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
The buffer that is used to hold the file descriptor when handling uploads is
vulnerable to overflow attacks.  We fixed the problem by checking to see that
the length of the file descriptor was within the given size limit with
strnlen().  strlen() can also be prone to overflow attacks so we use its safe
counter part strnlen().  strnlen() has 2 parameters versus the usual 1 of
strlen().  The second parameter handles the maximum limit that the function
should check the length of the given argument.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
We saw that the upload requests can request for files that were outside the
directory of where the program lied.  This was dangerous since the attacking
request can request for sensitive information that may grant access of the
machine to the attacker.  The problem was approached by creating a whitelist
characters for the argument.  We implemented a check to see that the first
letter of the requested file starts with a letter or prefixed specifically
by './'.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
For our first evil mode attack (evil_mode = 1), when we receive an upload request, we will flood the
file descriptor of the peer so that it will be endlessly reading it and will never actually
download a file.
For our second evil mode attack (evil_mode = 2), when we recieve an upload request, we flood that 
peer with the requested upload file continuously. There is a download cap at 50, but after that, the
peer will be unable to download other files.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
